"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DefaultBrowserBehavior_1 = __importDefault(require("../browserbehavior/DefaultBrowserBehavior"));
const DefaultModality_1 = __importDefault(require("../modality/DefaultModality"));
const SDP_1 = __importDefault(require("../sdp/SDP"));
const BaseTask_1 = __importDefault(require("./BaseTask"));
/*
 * [[SetLocalDescriptionTask]] asynchronously calls [[setLocalDescription]] on peer connection.
 */
class SetLocalDescriptionTask extends BaseTask_1.default {
    constructor(context) {
        super(context.logger);
        this.context = context;
        this.taskName = 'SetLocalDescriptionTask';
    }
    cancel() {
        // Just in case. The baseCancel behavior should prevent this.
        /* istanbul ignore else */
        if (this.cancelPromise) {
            const error = new Error(`canceling ${this.name()}`);
            this.cancelPromise(error);
            delete this.cancelPromise;
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            const peer = this.context.peer;
            const sdpOfferInit = this.context.sdpOfferInit;
            let sdp = sdpOfferInit.sdp;
            if (this.context.browserBehavior.supportsVideoLayersAllocationRtpHeaderExtension()) {
                // This will be negotiatiated with backend, and we will only use it to skip resubscribes
                // if we confirm support/negotiation via `RTCRtpTranceiver.sender.getParams`
                sdp = new SDP_1.default(sdp).withVideoLayersAllocationRtpHeaderExtension(this.context.previousSdpOffer)
                    .sdp;
            }
            // We will remove the dependency descriptor RTP header extension after set if this branch is not hit, as
            // browsers will not remove it from the send section. We don't do it here, so that we don't lose track of
            // the header extension IDs being used when we store `this.context.previousSdpOffer`.
            if (this.context.browserBehavior.supportsDependencyDescriptorRtpHeaderExtension() &&
                this.context.videoUplinkBandwidthPolicy.wantsVideoDependencyDescriptorRtpHeaderExtension !==
                    undefined &&
                this.context.videoUplinkBandwidthPolicy.wantsVideoDependencyDescriptorRtpHeaderExtension()) {
                sdp = new SDP_1.default(sdp).withDependencyDescriptorRtpHeaderExtension(this.context.previousSdpOffer)
                    .sdp;
            }
            if (new DefaultBrowserBehavior_1.default().requiresDisablingH264Encoding()) {
                sdp = new SDP_1.default(sdp).removeH264SupportFromSendSection().sdp;
            }
            // We set content hint to `motion` as a workaround for the issue Chrome cannot enable temporal
            // scalability for screen share https://bugs.chromium.org/p/chromium/issues/detail?id=1433486
            // As a side effect, content share may start at a low resolution and take a long time to adapt,
            // especially when there is limited motion on screen. To mitigate the problem, we set a starting
            // bitrate of 100 kbps for content share with SVC enabled.
            const attendeeId = this.context.audioVideoController.configuration.credentials.attendeeId;
            const isContent = new DefaultModality_1.default(attendeeId).hasModality(DefaultModality_1.default.MODALITY_CONTENT);
            if (isContent && this.context.audioVideoController.configuration.enableSVC) {
                sdp = new SDP_1.default(sdp).withStartingVideoSendBitrate(100).sdp;
            }
            if (this.context.videoSendCodecPreferences !== undefined &&
                this.context.videoSendCodecPreferences.length > 0) {
                sdp = new SDP_1.default(sdp).withVideoSendCodecPreferences(this.context.meetingSupportedVideoSendCodecPreferences !== undefined
                    ? this.context.meetingSupportedVideoSendCodecPreferences
                    : this.context.videoSendCodecPreferences).sdp;
            }
            if (this.context.audioProfile) {
                sdp = new SDP_1.default(sdp).withAudioMaxAverageBitrate(this.context.audioProfile.audioBitrateBps).sdp;
                if (this.context.audioProfile.isStereo()) {
                    sdp = new SDP_1.default(sdp).withStereoAudio().sdp;
                }
                if (this.context.audioProfile.hasRedundancyEnabled()) {
                    const audioPayloadMap = new SDP_1.default(sdp).getAudioPayloadTypes();
                    /* istanbul ignore else */
                    if (this.context.transceiverController &&
                        this.context.transceiverController.setAudioPayloadTypes) {
                        this.context.transceiverController.setAudioPayloadTypes(audioPayloadMap);
                    }
                }
            }
            this.logger.debug(() => {
                return `local description is >>>${sdp}<<<`;
            });
            const sdpOffer = {
                type: 'offer',
                sdp: sdp,
                toJSON: null,
            };
            yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.cancelPromise = (error) => {
                    reject(error);
                };
                try {
                    yield peer.setLocalDescription(sdpOffer);
                    resolve();
                }
                catch (error) {
                    reject(error);
                }
                finally {
                    delete this.cancelPromise;
                }
            }));
            this.context.logger.info('set local description');
        });
    }
}
exports.default = SetLocalDescriptionTask;
//# sourceMappingURL=SetLocalDescriptionTask.js.map